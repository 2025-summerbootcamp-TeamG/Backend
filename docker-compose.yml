version: "3.9"

services:
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
    depends_on:
      - web
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/static  # 추가: 호스트의 static 폴더를 nginx 컨테이너에 마운트

  web:
    #image: ${DOCKERHUB_USERNAME}/ticket-backend:dev-latest
    build: .
    container_name: django-backend
    command: gunicorn ticket_backend.wsgi:application --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    #volumes:
    #  - .:/app
    env_file:
      - .env
    depends_on:
      - db
    volumes:
      - ./static:/app/static  # 추가: 호스트의 static 폴더를 web 컨테이너에 마운트

  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}

    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
  
  anti_spoofing_server:
    build:
      context: ./anti_spoofing_server
    container_name: anti_spoofing_server
    ports:
      - "5001:5001"
    volumes:
      - ./anti_spoofing_server/static/uploads:/app/static/uploads

  redis:
    image: redis
    ports:
      - "6379:6379"

  celery:
    #image: ${DOCKERHUB_USERNAME}/ticket-backend:dev-latest
    build: .
    command: celery -A ticket_backend worker --loglevel=info
    depends_on:
      - redis
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

volumes:
  mysql_data:
